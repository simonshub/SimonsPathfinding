/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import github.simon.pathfinding.Node;
import github.simon.pathfinding.Path;
import github.simon.pathfinding.algorithms.Pathfinder;
import github.simon.pathfinding.algorithms.greedy.GreedyPathfinder;
import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import javax.swing.JLabel;
import javax.swing.JTable;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableModel;

/**
 *
 * @author btb
 */
public class TestGUI extends javax.swing.JFrame {

    public static final int MAP_HEIGHT = 20;
    public static final int MAP_WIDTH = 20;
    public static final int NODE_SIZE = 16;
    
    /**
     * Creates new form TestGUI
     */
    public TestGUI() {
        initComponents();
        
        SomeNodeMapImpl map = new SomeNodeMapImpl(MAP_WIDTH, MAP_HEIGHT);
        
        Pathfinder<SomeNodeImpl> pf = new GreedyPathfinder ();
        long start = System.currentTimeMillis();
        Path<SomeNodeImpl> path = pf.findPath(map, 0, 0, 16, 18, 3000);
        long end = System.currentTimeMillis();
        
        if (path==null)
            System.err.println("PATH WAS NOT FOUND!");
        
        table.setModel(new TableModel () {
            @Override
            public int getRowCount() {
                return map.getSizeY();
            }

            @Override
            public int getColumnCount() {
                return map.getSizeX();
            }

            @Override
            public String getColumnName(int columnIndex) {
                return "";
            }

            @Override
            public Class<?> getColumnClass(int columnIndex) {
                return String.class;
            }

            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return false;
            }

            @Override
            public Object getValueAt(int rowIndex, int columnIndex) {
                Node node = map.getNode(columnIndex, rowIndex);
                return node.isBlocked() ? "--" : (int)(node.getCost(null)*100f);
            }

            @Override
            public void setValueAt(Object aValue, int rowIndex, int columnIndex) { }

            @Override
            public void addTableModelListener(TableModelListener l) { }

            @Override
            public void removeTableModelListener(TableModelListener l) { }
        });
        
        table.setBackground(Color.black);
        table.setDefaultRenderer(String.class, new DefaultTableCellRenderer () {
            @Override
            public Component getTableCellRendererComponent (JTable jtable, Object value, boolean sel, boolean focus, int row, int col) {
                JLabel l = new JLabel ();
                l.setText(value.toString());
                l.setFont(Font.getFont("consolas"));

                SomeNodeImpl node = map.getNode(col, row);
                if (node.isBlocked())
                    l.setForeground(new Color ( 1f,0f,0f ) );
                else if (path==null)
                    l.setForeground(new Color ( .7f,.7f,.7f ) );
                else if (path.getStart().getX()==node.getX() && path.getStart().getY()==node.getY())
                    l.setForeground(new Color ( .7f,.7f,1f ) );
                else if (path.getGoal().getX()==node.getX() && path.getGoal().getY()==node.getY())
                    l.setForeground(new Color ( 1f,0f,1f ) );
                else if (path.getAllSteps().contains(node))
                    l.setForeground(new Color ( 1f,1f,0f ) );
                else
                    l.setForeground(new Color ( 1f,1f,1f ) );

                return l;
            }
        } );
        
        this.setTitle(String.format("Pathfinding finished in %.6f sec", ( (end-start) / 1000f )));
        
        this.pack();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        table.setFont(new java.awt.Font("Consolas", 0, 10)); // NOI18N
        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(table);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 550, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 349, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TestGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TestGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TestGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TestGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new TestGUI().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables
}
